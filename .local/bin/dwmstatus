#!/bin/sh

usage () {
	cat 1>&2 <<EOF
$0 [option...]
Simple text status bar for DWM, also allowing retrieval of individual system
information snippets

Options:
  -h  display this help and exit
  -v  enable verbose output
  -d  enable debug logging (\`set -x\`)
  -b  retrieve battery percentage, handling status notifications
  -w  retrieve weather from wttr.in
EOF
}

STATUS_BLACK="$(printf "%b" "\033[90m")"
STATUS_RED="$(printf "%b" "\033[31m")"
STATUS_YELLOW="$(printf "%b" "\033[33m")"
STATUS_BLUE="$(printf "%b" "\033[34m")"
STATUS_GREY="$(printf "%b" "\033[37m")"
STATUS_RESET="$(printf "%b" "\033[0m")"

main() {
	NOW="$(date "+%s")"
	if [ "$(printf "%c" "$WEATHER")" = "$(printf "\033")" ]; then
		SECS=$(( LAST_WEATHER_UPDATE + 1800 ))
		[ "$SECS" -lt "$NOW" ] && SECS=0
	else
		[ $(( LAST_WEATHER_UPDATE + WEATHER_FREQ )) -lt "$NOW" ] && SECS=0
	fi

	weather
	battery

	cat > /tmp/dwmstatus <<EOF
LAST_RUN=$NOW
WEATHER="$WEATHER"
LAST_WEATHER_UPDATE=$LAST_WEATHER_UPDATE
BATTERY="$BATTERY"
BAT_STATUS=$BAT_STATUS
BAT_NOTIF_ID=$BAT_NOTIF_ID
EOF

}

BATTERY=0
BAT_STATUS=1
battery () {
	[ $(( LAST_RUN % 10 )) -ne 0 ] && printf "%s\n%s" "$SECS" "$LAST_RUN" > /tmp/dwmstatus-dbg && return
	[ -n "$DWMSTATUS_DEBUG" ] && echo "[$(date -Is)] Updating battery status"
	cd /sys/class/power_supply || return

	TOTAL=0
	BATN=0
	for BAT in ./BAT*/; do
		BATN=$(( BATN + 1 ))
		TOTAL=$(( TOTAL + $(cat "./$BAT/capacity") ))
	done
	PERC=$(( TOTAL / BATN ))

	if [ "$(cat ./AC/online)" -eq 1 ]; then
		[ "$BAT_NOTIF_ID" ] && notify-send -r "$BAT_NOTIF_ID" -t 0 "" # clear persistent notif
		BAT_NOTIF_ID=
		COLOUR="$STATUS_BLUE"
	else
		case "$PERC" in
			[5-9]?|100)
				COLOUR="$STATUS_GREY" BAT_STATUS=1
				;;
			1[5-9]|[2-4]?)
				[ $BAT_STATUS -ne 0 ] && notify-send "Battery below 50%"
				COLOUR="$STATUS_YELLOW" BAT_STATUS=0
				;;
			*)
				[ $BAT_STATUS -ne -1 ] && \
					BAT_NOTIF_ID="$(notify-send --print-id -u critical "Battery low" "Battery below 15%, charge now!")"
				COLOUR="$STATUS_RED" BAT_STATUS=-1
				;;
		esac
	fi

	export BATTERY="Bat: $COLOUR$PERC%$STATUS_RESET"
}

# approximate locations only :-)
#COORDS="43.4,-80.4"
COORDS="44.2,-80.2"

# seconds between weather updates
WEATHER_FREQ=3600
LAST_WEATHER_UPDATE=
weather () {
	[ $(( SECS % WEATHER_FREQ )) -ne 0 ] && return
	[ -n "$DWMSTATUS_DEBUG" ] && echo "[$(date -Is)] Updating weather information"
	export LAST_WEATHER_UPDATE="$LAST_RUN"

	W=$(curl -fGs --data-urlencode "format=%C %t (%f) %w %m" "wttr.in/$COORDS?m")

	if [ "${W%;*}" = "Unknown location" ]; then
		# Try again with coords given after '~'
		W=$(curl -fGs --data-urlencode "format=%C %t (%f) %w %m" "wttr.in/${W#*~}?m")
		[ -n "$W" ] && W="$STATUS_YELLOW$W$STATUS_RESET"
	fi

	if [ -z "$W" ] || [ "${W%;*}" = "Unknown location" ]; then
		export WEATHER="$STATUS_BLACK${WEATHER:-"Error fetching weather report"}$STATUS_RESET"
		return
	fi

	export WEATHER="$W"
}

[ -f /tmp/dwmstatus ] && . /tmp/dwmstatus
SECS="$LAST_RUN"

if [ $# -eq 0 ]; then
	while true; do
		main
		VOL="$(amixer sget Master | awk -F"[][]" '/%/ { print $2 }' | head -n1)"
		DATE="$(date +"%a %F %T")"
		MPRIS="$(mpris-ctl info '%track_name - %artist_name' 2>/dev/null)"
		[ "$MPRIS" = "" ] && MPRIS="${STATUS_BLACK}n/a${STATUS_RESET}"

		#xsetroot -name " $MPRIS | Vol: $VOL | $WEATHER | $DATE " || exit 1
		xsetroot -name " $MPRIS | Vol: $VOL | $BATTERY | $WEATHER | $DATE " || exit 1
		sleep 1; SECS=$(( SECS + 1 ))
	done
fi

while getopts "hvdwb" opt; do
	case "$opt" in
		h|\?) usage ;;
		v) DWMSTATUS_DEBUG=1 ;;
		d) DWMSTATUS_DEBUG=1; set -x ;;
		b) main; echo "$BATTERY" ;;
		w) # print weather to stdout, and last update time in terminal
			main
			echo "$WEATHER"
			[ -t 0 ] && date -Iseconds -d "@$LAST_WEATHER_UPDATE"
			;;
	esac
done
